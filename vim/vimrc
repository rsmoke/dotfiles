"============================================================================================
" Vundle stuff
"============================================================================================
set nocompatible " be iMproved
" enable syntax and plugins (for netrw)
"syntax enable
"filetype plugin on


filetype off "required



" syntax on

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" Let Vundle manage itself
Plugin 'VundleVim/Vundle.vim'

" Plugins
Plugin 'tpope/vim-rails'
Plugin 'vim-ruby/vim-ruby'
Plugin 'jeffkreeftmeijer/vim-numbertoggle'
Plugin 'junegunn/vader.vim'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

"[ Show when lines extend past column 80
highlight ColorColumn ctermfg=208 ctermbg=Black

function! MarkMargin (on)
	if exists('b:MarkMargin')
		try
			call matchdelete(b:MarkMargin)
		catch /./
		endtry
		unlet b:MarkMargin
	endif
	if a:on
		let b:MarkMargin = matchadd('ColorColumn', '\%81v\s*\S', 100)
	endif
endfunction

augroup MarkMargin
	autocmd!
	autocmd  BufEnter  *       :call MarkMargin(1)
	autocmd  BufEnter  *.vp*   :call MarkMargin(0)
augroup END

"============================================================================================
" Ruby stuff
"============================================================================================
syntax on

augroup myfiletypes
	" Clear old autocmds in group
	autocmd!
	" autoindent with two spaces, always expand tabs
	autocmd FileType ruby,eruby,yaml setlocal ai sw=2 sts=2 et
	autocmd FileType ruby,eruby,yaml setlocal path+=lib
	"  autocmd FileType ruby,eruby,yaml setlocal colorcolumn=80
	" Make ?s part of words
	autocmd FileType ruby,eruby,yaml setlocal iskeyword+=?
augroup END

let mapleader = "\<Space>"

imap jj <esc>
set number

function! s:exercism_tests()
  if expand('%:e') == 'vim'
    let testfile = printf('%s/%s.vader', expand('%:p:h'),
          \ tr(expand('%:p:h:t'), '-', '_'))
    if !filereadable(testfile)
      echoerr 'File does not exist: '. testfile
      return
    endif
    source %
    execute 'Vader' testfile
  else
    let sourcefile = printf('%s/%s.vim', expand('%:p:h'),
          \ tr(expand('%:p:h:t'), '-', '_'))
    if !filereadable(sourcefile)
      echoerr 'File does not exist: '. sourcefile
      return
    endif
    execute 'source' sourcefile
    Vader
  endif
endfunction

autocmd BufRead *.{vader,vim}
      \ command! -buffer Test call s:exercism_tests()
